type spectrum = float array

let whitepoints =
    Array.of_list [
		Vec.mk 1.00000000 0.18172716 0.00000000; (* 1000K *)
		Vec.mk 1.00000000 0.42322816 0.00000000;
		Vec.mk 1.00000000 0.54360078 0.08679949;
		Vec.mk 1.00000000 0.64373109 0.28819679;
		Vec.mk 1.00000000 0.71976951 0.42860152;
		Vec.mk 1.00000000 0.77987699 0.54642268;
		Vec.mk 1.00000000 0.82854786 0.64816570;
		Vec.mk 1.00000000 0.86860704 0.73688797;
		Vec.mk 1.00000000 0.90198230 0.81465502;
		Vec.mk 1.00000000 0.93853986 0.88130458;
		Vec.mk 1.00000000 0.97107439 0.94305985;
		Vec.mk 1.00000000 1.00000000 1.00000000; (* 6500K *)
		Vec.mk 0.95160805 0.96983355 1.00000000;
		Vec.mk 0.91194747 0.94470005 1.00000000;
		Vec.mk 0.87906581 0.92357340 1.00000000;
		Vec.mk 0.85139976 0.90559011 1.00000000;
		Vec.mk 0.82782969 0.89011714 1.00000000;
		Vec.mk 0.80753191 0.87667891 1.00000000;
		Vec.mk 0.78988728 0.86491137 1.00000000; (* 10000K *)
		Vec.mk 0.77442176 0.85453121 1.00000000;
    ]
;;

let x_table = Array.of_list [0.003769647; 0.009382967; 0.02214302;
                            0.04742986; 0.08953803; 0.1446214;
                            0.2035729; 0.2488523; 0.2918246;
                            0.3227087;0.3482554; 0.3418483;
                            0.3224637; 0.2826646; 0.2485254;
                            0.2219781; 0.1806905; 0.129192;
                            0.08182895; 0.04600865; 0.02083981;
                            0.007097731; 0.002461588; 0.003649178;
                            0.01556989; 0.04315171; 0.07962917;
                            0.1268468; 0.1818026; 0.2405015;
                            0.309811 ; 0.3804244; 0.4494206;
                            0.5280233; 0.6133784; 0.7016774;
                            0.796775; 0.8853376; 0.9638388;
                            1.051011; 1.109767; 1.14362;
                            1.151033; 1.134757; 1.083928;
                            1.007344; 0.9142877; 0.8135565;
                            0.6924717; 0.575541; 0.4731224;
                            0.3844986; 0.2997374; 0.2277792;
                            0.1707914; 0.1263808; 0.09224597;
                            0.0663996; 0.04710606; 0.03292138;
                            0.02262306; 0.01575417; 0.01096778;
                            0.00760875; 0.005214608; 0.003569452;
                            0.002464821; 0.001703876; 0.001186238;
                            0.0008269535; 0.0005758303; 0.0004058303;
                            0.0002856577; 0.0002021853; 0.000143827;
                            0.0001024685; 7.347551E-05; 5.25987E-05;
                            3.806114E-05; 2.758222E-05; 2.004122E-05;
                            1.458792E-05; 1.068141E-05; 7.857521E-06;
                            5.768284E-06; 4.259166E-06; 3.167765E-06;
                            2.358723E-06; 1.762465E-06;] 
;;

let y_table = Array.of_list [
                            0.0004146161; 0.001059646; 0.002452194;
                            0.004971717; 0.00907986; 0.01429377;
                            0.02027369; 0.02612106; 0.03319038;
                            0.0415794; 0.05033657; 0.05743393;
                            0.06472352; 0.07238339; 0.08514816;
                            0.1060145; 0.1298957; 0.1535066;
                            0.1788048; 0.2064828; 0.237916;
                            0.285068; 0.3483536; 0.4277595;
                            0.5204972; 0.6206256; 0.718089;
                            0.7946448; 0.8575799; 0.9071347;
                            0.9544675; 0.9814106; 0.9890228;
                            0.9994608; 0.9967737; 0.9902549;
                            0.9732611; 0.9424569; 0.8963613;
                            0.8587203; 0.8115868; 0.7544785;
                            0.6918553; 0.6270066; 0.5583746;
                            0.489595; 0.4229897; 0.3609245;
                            0.2980865; 0.2416902; 0.1943124;
                            0.1547397; 0.119312; 0.08979594;
                            0.06671045; 0.04899699; 0.03559982;
                            0.02554223; 0.01807939; 0.01261573;
                            0.008661284; 0.006027677; 0.004195941;
                            0.002910864; 0.001995557; 0.001367022;
                            0.0009447269; 0.000653705; 0.000455597;
                            0.0003179738; 0.0002217445; 0.0001565566;
                            0.0001103928; 7.827442E-05; 5.578862E-05;
                            3.981884E-05; 2.860175E-05; 2.051259E-05;
                            1.487243E-05; 0.0000108; 7.86392E-06;
                            5.736935E-06; 4.211597E-06; 3.106561E-06;
                            2.286786E-06; 1.693147E-06; 1.262556E-06;
                            9.422514E-07; 7.05386E-07;
];;

let z_table = Array.of_list [
                            0.0184726; 0.04609784; 0.109609;
                            0.2369246; 0.4508369; 0.7378822;
                            1.051821; 1.305008; 1.552826;
                            1.74828; 1.917479; 1.918437;
                            1.848545; 1.664439; 1.522157;
                            1.42844; 1.25061; 0.9991789;
                            0.7552379; 0.5617313; 0.4099313;
                            0.3105939; 0.2376753; 0.1720018;
                            0.1176796; 0.08283548; 0.05650407;
                            0.03751912; 0.02438164; 0.01566174;
                            0.00984647; 0.006131421; 0.003790291;
                            0.002327186; 0.001432128; 0.0008822531;
                            0.0005452416; 0.0003386739; 0.0002117772;
                            0.0001335031; 8.494468E-05; 5.460706E-05;
                            3.549661E-05; 2.334738E-05; 1.554631E-05;
                            1.048387E-05; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 0.;
                            0.; 0.; 
];;

let spectrum_min = 390
let spectrum_max = 780
let spectrum_length = (spectrum_max - spectrum_min) / 5

let create_spectrum () =
    (* 380 - 780 nm in 5nm increments *)
    Array.make spectrum_length 0.
;;

let clamp v max min =
    if v > max then max
    else if v < min then min
    else v
;;

let color_to_spectrum (color, wavelength) : float =
    let open Vec in
    let r = color.x
    and g = color.y
    and b = color.z in
    let r = if r > 0.04045
            then ((r +. 0.055 ) /. 1.055) ** 2.4
            else r /. 12.92
    and g = if g > 0.04045
            then ((g +. 0.055) /. 1.055) ** 2.4
            else g /. 12.92
    and b = if b > 0.04045
            then ((b +. 0.055) /. 1.055) ** 2.4
            else b /. 12.92
    in

    (*
    let r = r *. 100.
    and g = g *. 100.
    and b = b *. 100. in
*)

    (* Observer. = 2°, Illuminant = D65 *)
    let x = r *. 0.4124 +. g *. 0.3576 +. b *. 0.1805
    and y = r *. 0.2126 +. g *. 0.7152 +. b *. 0.0722
    and z = r *. 0.0193 +. g *. 0.1192 +. b *. 0.9505 in

(*    Printf.printf "R %f G %f B %f -> X %f Y %f Z %f\n"
                  color.x color.y color.z
                  x y z; flush stdout;
                  *)

    (*let spectrum = create_spectrum() in*)
    let i = int_of_float (wavelength /. 5.) in
    let out = 
        if abs_float (x_table.(i) -. x) <= 0.2 then
            10.0
        else if abs_float (y_table.(i) -. y) <= 0.2 then
            10.0
        else if abs_float (z_table.(i) -. z) <= 0.2 then
            10.0
        else
            0.
    in
    (*Printf.printf "Out %f\n" out; flush stdout;*)
    out
;;

let spectrum_to_color spectrum = 
    (* Spectrum to XYZ *)
    let x, y, z, _ =
        Array.fold_left (fun (x, y, z, idx) intensity -> 
            Printf.printf "intensity %f\n" intensity;
            let x = x +. x_table.(idx) *. intensity
            and y = y +. y_table.(idx) *. intensity
            and z = z +. z_table.(idx) *. intensity in
            (x, y, z, idx + 1)
        ) (0., 0., 0., 0) spectrum
    in
    (* XYZ to RGB *)    
    (*
var_X = X / 100        //X from 0 to  95.047      (Observer = 2°, Illuminant = D65)
var_Y = Y / 100        //Y from 0 to 100.000
var_Z = Z / 100        //Z from 0 to 108.883
*)
    Printf.printf "Spectral power: X %f Y %f Z %f\n" x y z; flush stdout;
    let r = x *.  3.2406 +. y *. -1.5372 +. z *. -0.4986
    and g = x *. -0.9689 +. y *.  1.8758 +. z *.  0.0415
    and b = x *.  0.0557 +. y *. -0.2040 +. z *.  1.0570 in

    let power = 1. /. 2.4 in
    let r = if r > 0.0031308
            then 1.055 *. (r ** power) -. 0.055
            else 12.92 *. r 
    and g = if g > 0.0031308 
            then 1.055 *. (g ** power) -. 0.055
            else 12.92 *. g
    and b = if b > 0.0031308 
            then 1.055 *. (b ** power) -. 0.055
            else 12.92 *. b 
    in
    let r = clamp r 0. 1.
    and g = clamp g 0. 1.
    and b = clamp b 0. 1. in
    Printf.printf "R %f G %f B %f" r g b; flush stdout;
    Vec.mk r g b
;;
